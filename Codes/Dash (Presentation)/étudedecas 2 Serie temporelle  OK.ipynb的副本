{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Séries non désaisonnalisées (fr=France, be=Belgique, nl= paus-bas, ger=Allemagne, uk=Grande-Bretagne)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>be_da_base</th>\n",
       "      <th>fr_da_base</th>\n",
       "      <th>nl_da_base</th>\n",
       "      <th>ger_da_base</th>\n",
       "      <th>uk_da_base_eur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>39.500</td>\n",
       "      <td>40.50</td>\n",
       "      <td>39.000</td>\n",
       "      <td>36.90</td>\n",
       "      <td>38.575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>38.000</td>\n",
       "      <td>37.75</td>\n",
       "      <td>38.250</td>\n",
       "      <td>34.00</td>\n",
       "      <td>38.630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>36.000</td>\n",
       "      <td>36.00</td>\n",
       "      <td>36.375</td>\n",
       "      <td>34.00</td>\n",
       "      <td>35.505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>35.000</td>\n",
       "      <td>29.00</td>\n",
       "      <td>31.500</td>\n",
       "      <td>29.35</td>\n",
       "      <td>37.890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>33.625</td>\n",
       "      <td>32.20</td>\n",
       "      <td>34.000</td>\n",
       "      <td>31.75</td>\n",
       "      <td>35.460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>1/22/10</td>\n",
       "      <td>41.500</td>\n",
       "      <td>42.00</td>\n",
       "      <td>40.000</td>\n",
       "      <td>40.50</td>\n",
       "      <td>41.425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>1/25/10</td>\n",
       "      <td>55.000</td>\n",
       "      <td>55.25</td>\n",
       "      <td>53.000</td>\n",
       "      <td>52.25</td>\n",
       "      <td>43.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>1/26/10</td>\n",
       "      <td>52.750</td>\n",
       "      <td>54.25</td>\n",
       "      <td>48.250</td>\n",
       "      <td>48.00</td>\n",
       "      <td>43.765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>774</th>\n",
       "      <td>1/27/10</td>\n",
       "      <td>51.500</td>\n",
       "      <td>55.00</td>\n",
       "      <td>42.400</td>\n",
       "      <td>41.75</td>\n",
       "      <td>45.635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>1/28/10</td>\n",
       "      <td>53.500</td>\n",
       "      <td>55.00</td>\n",
       "      <td>49.750</td>\n",
       "      <td>50.00</td>\n",
       "      <td>45.560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>776 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  be_da_base  fr_da_base  nl_da_base  ger_da_base  uk_da_base_eur\n",
       "0     1/2/07      39.500       40.50      39.000        36.90          38.575\n",
       "1     1/3/07      38.000       37.75      38.250        34.00          38.630\n",
       "2     1/4/07      36.000       36.00      36.375        34.00          35.505\n",
       "3     1/5/07      35.000       29.00      31.500        29.35          37.890\n",
       "4     1/8/07      33.625       32.20      34.000        31.75          35.460\n",
       "..       ...         ...         ...         ...          ...             ...\n",
       "771  1/22/10      41.500       42.00      40.000        40.50          41.425\n",
       "772  1/25/10      55.000       55.25      53.000        52.25          43.375\n",
       "773  1/26/10      52.750       54.25      48.250        48.00          43.765\n",
       "774  1/27/10      51.500       55.00      42.400        41.75          45.635\n",
       "775  1/28/10      53.500       55.00      49.750        50.00          45.560\n",
       "\n",
       "[776 rows x 6 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_day = pd.read_csv('/Users/xudawei/Desktop/devoirs en M2/Fwd ETUDE DE CAS/Serie temporelle/Series price élec/Day ahead-表格 1.csv',sep =\",\")\n",
    "df_day\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>be_ma_base</th>\n",
       "      <th>fr_ma_base</th>\n",
       "      <th>nl_ma_base</th>\n",
       "      <th>ger_ma_base</th>\n",
       "      <th>uk_ma_base_eur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>56.750</td>\n",
       "      <td>53.85</td>\n",
       "      <td>57.500</td>\n",
       "      <td>53.25</td>\n",
       "      <td>50.705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>54.500</td>\n",
       "      <td>53.75</td>\n",
       "      <td>55.575</td>\n",
       "      <td>53.00</td>\n",
       "      <td>51.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>54.500</td>\n",
       "      <td>53.95</td>\n",
       "      <td>55.750</td>\n",
       "      <td>53.10</td>\n",
       "      <td>50.590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>53.100</td>\n",
       "      <td>52.25</td>\n",
       "      <td>54.100</td>\n",
       "      <td>51.50</td>\n",
       "      <td>48.735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>50.375</td>\n",
       "      <td>49.35</td>\n",
       "      <td>51.400</td>\n",
       "      <td>49.25</td>\n",
       "      <td>47.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>1/22/10</td>\n",
       "      <td>43.000</td>\n",
       "      <td>46.00</td>\n",
       "      <td>41.750</td>\n",
       "      <td>41.80</td>\n",
       "      <td>41.195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>1/25/10</td>\n",
       "      <td>44.500</td>\n",
       "      <td>48.00</td>\n",
       "      <td>43.000</td>\n",
       "      <td>43.15</td>\n",
       "      <td>42.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>1/26/10</td>\n",
       "      <td>47.000</td>\n",
       "      <td>50.80</td>\n",
       "      <td>44.600</td>\n",
       "      <td>44.20</td>\n",
       "      <td>43.705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>774</th>\n",
       "      <td>1/27/10</td>\n",
       "      <td>48.700</td>\n",
       "      <td>55.00</td>\n",
       "      <td>45.500</td>\n",
       "      <td>45.55</td>\n",
       "      <td>44.205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>1/28/10</td>\n",
       "      <td>49.500</td>\n",
       "      <td>54.50</td>\n",
       "      <td>45.650</td>\n",
       "      <td>45.50</td>\n",
       "      <td>44.695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>776 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  be_ma_base  fr_ma_base  nl_ma_base  ger_ma_base  uk_ma_base_eur\n",
       "0     1/2/07      56.750       53.85      57.500        53.25          50.705\n",
       "1     1/3/07      54.500       53.75      55.575        53.00          51.300\n",
       "2     1/4/07      54.500       53.95      55.750        53.10          50.590\n",
       "3     1/5/07      53.100       52.25      54.100        51.50          48.735\n",
       "4     1/8/07      50.375       49.35      51.400        49.25          47.070\n",
       "..       ...         ...         ...         ...          ...             ...\n",
       "771  1/22/10      43.000       46.00      41.750        41.80          41.195\n",
       "772  1/25/10      44.500       48.00      43.000        43.15          42.005\n",
       "773  1/26/10      47.000       50.80      44.600        44.20          43.705\n",
       "774  1/27/10      48.700       55.00      45.500        45.55          44.205\n",
       "775  1/28/10      49.500       54.50      45.650        45.50          44.695\n",
       "\n",
       "[776 rows x 6 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_month = pd.read_csv('/Users/xudawei/Desktop/devoirs en M2/Fwd ETUDE DE CAS/Serie temporelle/Series price élec/Month ahead-表格 1.csv',sep =\",\")\n",
    "df_month\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>be_ya_base</th>\n",
       "      <th>fr_ya_base</th>\n",
       "      <th>nl_ya_base</th>\n",
       "      <th>ger_ya_base</th>\n",
       "      <th>uk_ya_base_eur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>55.25</td>\n",
       "      <td>53.000</td>\n",
       "      <td>58.50</td>\n",
       "      <td>54.70</td>\n",
       "      <td>49.595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>55.25</td>\n",
       "      <td>52.800</td>\n",
       "      <td>58.25</td>\n",
       "      <td>54.35</td>\n",
       "      <td>49.145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>55.50</td>\n",
       "      <td>52.900</td>\n",
       "      <td>58.05</td>\n",
       "      <td>54.20</td>\n",
       "      <td>49.890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>54.00</td>\n",
       "      <td>51.800</td>\n",
       "      <td>56.75</td>\n",
       "      <td>53.40</td>\n",
       "      <td>49.150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>54.70</td>\n",
       "      <td>51.425</td>\n",
       "      <td>56.25</td>\n",
       "      <td>52.70</td>\n",
       "      <td>48.055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>1/22/10</td>\n",
       "      <td>49.20</td>\n",
       "      <td>51.200</td>\n",
       "      <td>48.40</td>\n",
       "      <td>49.20</td>\n",
       "      <td>45.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>1/25/10</td>\n",
       "      <td>49.35</td>\n",
       "      <td>51.600</td>\n",
       "      <td>48.70</td>\n",
       "      <td>49.60</td>\n",
       "      <td>45.690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>1/26/10</td>\n",
       "      <td>49.30</td>\n",
       "      <td>51.800</td>\n",
       "      <td>48.55</td>\n",
       "      <td>49.60</td>\n",
       "      <td>46.510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>774</th>\n",
       "      <td>1/27/10</td>\n",
       "      <td>50.00</td>\n",
       "      <td>52.100</td>\n",
       "      <td>49.25</td>\n",
       "      <td>50.05</td>\n",
       "      <td>45.980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>1/28/10</td>\n",
       "      <td>49.50</td>\n",
       "      <td>51.500</td>\n",
       "      <td>48.70</td>\n",
       "      <td>49.45</td>\n",
       "      <td>45.385</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>776 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  be_ya_base  fr_ya_base  nl_ya_base  ger_ya_base  uk_ya_base_eur\n",
       "0     1/2/07       55.25      53.000       58.50        54.70          49.595\n",
       "1     1/3/07       55.25      52.800       58.25        54.35          49.145\n",
       "2     1/4/07       55.50      52.900       58.05        54.20          49.890\n",
       "3     1/5/07       54.00      51.800       56.75        53.40          49.150\n",
       "4     1/8/07       54.70      51.425       56.25        52.70          48.055\n",
       "..       ...         ...         ...         ...          ...             ...\n",
       "771  1/22/10       49.20      51.200       48.40        49.20          45.080\n",
       "772  1/25/10       49.35      51.600       48.70        49.60          45.690\n",
       "773  1/26/10       49.30      51.800       48.55        49.60          46.510\n",
       "774  1/27/10       50.00      52.100       49.25        50.05          45.980\n",
       "775  1/28/10       49.50      51.500       48.70        49.45          45.385\n",
       "\n",
       "[776 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_year = pd.read_csv('/Users/xudawei/Desktop/devoirs en M2/Fwd ETUDE DE CAS/Serie temporelle/Series price élec/Year ahead-表格 1.csv',sep =\",\")\n",
    "df_year\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyse sur le day_data (France-Germany)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>be_da_base</th>\n",
       "      <th>fr_da_base</th>\n",
       "      <th>nl_da_base</th>\n",
       "      <th>ger_da_base</th>\n",
       "      <th>uk_da_base_eur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>39.500</td>\n",
       "      <td>40.50</td>\n",
       "      <td>39.000</td>\n",
       "      <td>36.90</td>\n",
       "      <td>38.575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>38.000</td>\n",
       "      <td>37.75</td>\n",
       "      <td>38.250</td>\n",
       "      <td>34.00</td>\n",
       "      <td>38.630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>36.000</td>\n",
       "      <td>36.00</td>\n",
       "      <td>36.375</td>\n",
       "      <td>34.00</td>\n",
       "      <td>35.505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>35.000</td>\n",
       "      <td>29.00</td>\n",
       "      <td>31.500</td>\n",
       "      <td>29.35</td>\n",
       "      <td>37.890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>33.625</td>\n",
       "      <td>32.20</td>\n",
       "      <td>34.000</td>\n",
       "      <td>31.75</td>\n",
       "      <td>35.460</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     date  be_da_base  fr_da_base  nl_da_base  ger_da_base  uk_da_base_eur\n",
       "0  1/2/07      39.500       40.50      39.000        36.90          38.575\n",
       "1  1/3/07      38.000       37.75      38.250        34.00          38.630\n",
       "2  1/4/07      36.000       36.00      36.375        34.00          35.505\n",
       "3  1/5/07      35.000       29.00      31.500        29.35          37.890\n",
       "4  1/8/07      33.625       32.20      34.000        31.75          35.460"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_day.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1: expliquez ce que sont des prix (ou des contrats) de type AHEAD (day-ahead, etc.)\n",
    "    \n",
    "   ils sont les prix prévisionnels dans les journées prochaines       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2 : faites une analyse descriptive simple de ces données et tracez leur évolution dans le temps.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>fr_da_base</th>\n",
       "      <th>ger_da_base</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>40.50</td>\n",
       "      <td>36.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>37.75</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>36.00</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>29.00</td>\n",
       "      <td>29.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>32.20</td>\n",
       "      <td>31.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     date  fr_da_base  ger_da_base\n",
       "0  1/2/07       40.50        36.90\n",
       "1  1/3/07       37.75        34.00\n",
       "2  1/4/07       36.00        34.00\n",
       "3  1/5/07       29.00        29.35\n",
       "4  1/8/07       32.20        31.75"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d = df_day[['date','fr_da_base','ger_da_base']]\n",
    "df_m = df_month[['date','fr_ma_base','ger_ma_base']]\n",
    "df_y = df_year[['date','fr_ya_base','ger_ya_base']]\n",
    "df_d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date           0\n",
       "fr_da_base     0\n",
       "ger_da_base    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date           0\n",
       "fr_ma_base     0\n",
       "ger_ma_base    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date           0\n",
       "fr_ya_base     0\n",
       "ger_ya_base    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date            object\n",
       "fr_da_base     float64\n",
       "ger_da_base    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date            object\n",
       "fr_ma_base     float64\n",
       "ger_ma_base    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date            object\n",
       "fr_ya_base     float64\n",
       "ger_ya_base    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(776, 3)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(776, 3)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(776, 3)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2007-01-02', '2007-01-03', '2007-01-04', '2007-01-05',\n",
       "               '2007-01-08', '2007-01-09', '2007-01-10', '2007-01-11',\n",
       "               '2007-01-12', '2007-01-15',\n",
       "               ...\n",
       "               '2010-01-15', '2010-01-18', '2010-01-19', '2010-01-20',\n",
       "               '2010-01-21', '2010-01-22', '2010-01-25', '2010-01-26',\n",
       "               '2010-01-27', '2010-01-28'],\n",
       "              dtype='datetime64[ns]', name='date', length=776, freq=None)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = pd.to_datetime(df_d.date)\n",
    "df_d.index = index\n",
    "df_d.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2007-01-02', '2007-01-03', '2007-01-04', '2007-01-05',\n",
       "               '2007-01-08', '2007-01-09', '2007-01-10', '2007-01-11',\n",
       "               '2007-01-12', '2007-01-15',\n",
       "               ...\n",
       "               '2010-01-15', '2010-01-18', '2010-01-19', '2010-01-20',\n",
       "               '2010-01-21', '2010-01-22', '2010-01-25', '2010-01-26',\n",
       "               '2010-01-27', '2010-01-28'],\n",
       "              dtype='datetime64[ns]', name='date', length=776, freq=None)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = pd.to_datetime(df_m.date)\n",
    "df_m.index = index\n",
    "df_m.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2007-01-02', '2007-01-03', '2007-01-04', '2007-01-05',\n",
       "               '2007-01-08', '2007-01-09', '2007-01-10', '2007-01-11',\n",
       "               '2007-01-12', '2007-01-15',\n",
       "               ...\n",
       "               '2010-01-15', '2010-01-18', '2010-01-19', '2010-01-20',\n",
       "               '2010-01-21', '2010-01-22', '2010-01-25', '2010-01-26',\n",
       "               '2010-01-27', '2010-01-28'],\n",
       "              dtype='datetime64[ns]', name='date', length=776, freq=None)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = pd.to_datetime(df_y.date)\n",
    "df_y.index = index\n",
    "df_y.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>fr_da_base</th>\n",
       "      <th>ger_da_base</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>40.50</td>\n",
       "      <td>36.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>37.75</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>36.00</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>29.00</td>\n",
       "      <td>29.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>32.20</td>\n",
       "      <td>31.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  fr_da_base  ger_da_base\n",
       "date                                       \n",
       "2007-01-02  1/2/07       40.50        36.90\n",
       "2007-01-03  1/3/07       37.75        34.00\n",
       "2007-01-04  1/4/07       36.00        34.00\n",
       "2007-01-05  1/5/07       29.00        29.35\n",
       "2007-01-08  1/8/07       32.20        31.75"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>fr_ma_base</th>\n",
       "      <th>ger_ma_base</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>53.85</td>\n",
       "      <td>53.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>53.75</td>\n",
       "      <td>53.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>53.95</td>\n",
       "      <td>53.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>52.25</td>\n",
       "      <td>51.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>49.35</td>\n",
       "      <td>49.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  fr_ma_base  ger_ma_base\n",
       "date                                       \n",
       "2007-01-02  1/2/07       53.85        53.25\n",
       "2007-01-03  1/3/07       53.75        53.00\n",
       "2007-01-04  1/4/07       53.95        53.10\n",
       "2007-01-05  1/5/07       52.25        51.50\n",
       "2007-01-08  1/8/07       49.35        49.25"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>fr_ya_base</th>\n",
       "      <th>ger_ya_base</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>53.000</td>\n",
       "      <td>54.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>52.800</td>\n",
       "      <td>54.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>52.900</td>\n",
       "      <td>54.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>51.800</td>\n",
       "      <td>53.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>51.425</td>\n",
       "      <td>52.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  fr_ya_base  ger_ya_base\n",
       "date                                       \n",
       "2007-01-02  1/2/07      53.000        54.70\n",
       "2007-01-03  1/3/07      52.800        54.35\n",
       "2007-01-04  1/4/07      52.900        54.20\n",
       "2007-01-05  1/5/07      51.800        53.40\n",
       "2007-01-08  1/8/07      51.425        52.70"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>40.50</td>\n",
       "      <td>36.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>37.75</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>36.00</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>29.00</td>\n",
       "      <td>29.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>32.20</td>\n",
       "      <td>31.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  France  Germany\n",
       "date                               \n",
       "2007-01-02  1/2/07   40.50    36.90\n",
       "2007-01-03  1/3/07   37.75    34.00\n",
       "2007-01-04  1/4/07   36.00    34.00\n",
       "2007-01-05  1/5/07   29.00    29.35\n",
       "2007-01-08  1/8/07   32.20    31.75"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d=df_d.rename(columns = {'fr_da_base':'France', 'ger_da_base':'Germany'})\n",
    "df_d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>53.85</td>\n",
       "      <td>53.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>53.75</td>\n",
       "      <td>53.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>53.95</td>\n",
       "      <td>53.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>52.25</td>\n",
       "      <td>51.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>49.35</td>\n",
       "      <td>49.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  France  Germany\n",
       "date                               \n",
       "2007-01-02  1/2/07   53.85    53.25\n",
       "2007-01-03  1/3/07   53.75    53.00\n",
       "2007-01-04  1/4/07   53.95    53.10\n",
       "2007-01-05  1/5/07   52.25    51.50\n",
       "2007-01-08  1/8/07   49.35    49.25"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m=df_m.rename(columns = {'fr_ma_base':'France', 'ger_ma_base':'Germany'})\n",
    "df_m.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>53.000</td>\n",
       "      <td>54.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>52.800</td>\n",
       "      <td>54.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>52.900</td>\n",
       "      <td>54.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>51.800</td>\n",
       "      <td>53.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>51.425</td>\n",
       "      <td>52.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  France  Germany\n",
       "date                               \n",
       "2007-01-02  1/2/07  53.000    54.70\n",
       "2007-01-03  1/3/07  52.800    54.35\n",
       "2007-01-04  1/4/07  52.900    54.20\n",
       "2007-01-05  1/5/07  51.800    53.40\n",
       "2007-01-08  1/8/07  51.425    52.70"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y=df_y.rename(columns = {'fr_ya_base':'France', 'ger_ya_base':'Germany'})\n",
    "df_y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>776.000000</td>\n",
       "      <td>776.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>52.782796</td>\n",
       "      <td>50.851707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.926363</td>\n",
       "      <td>21.917824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>15.000000</td>\n",
       "      <td>13.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>34.500000</td>\n",
       "      <td>34.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>46.175000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>67.500000</td>\n",
       "      <td>63.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>158.000000</td>\n",
       "      <td>242.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           France     Germany\n",
       "count  776.000000  776.000000\n",
       "mean    52.782796   50.851707\n",
       "std     22.926363   21.917824\n",
       "min     15.000000   13.500000\n",
       "25%     34.500000   34.250000\n",
       "50%     46.175000   45.000000\n",
       "75%     67.500000   63.750000\n",
       "max    158.000000  242.000000"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reduce the precision of numbers - so that it is easy to read\n",
    "#pd.set_option('precision', 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>776.000000</td>\n",
       "      <td>776.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>52.782796</td>\n",
       "      <td>50.851707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.926363</td>\n",
       "      <td>21.917824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>15.000000</td>\n",
       "      <td>13.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>34.500000</td>\n",
       "      <td>34.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>46.175000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>67.500000</td>\n",
       "      <td>63.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>158.000000</td>\n",
       "      <td>242.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           France     Germany\n",
       "count  776.000000  776.000000\n",
       "mean    52.782796   50.851707\n",
       "std     22.926363   21.917824\n",
       "min     15.000000   13.500000\n",
       "25%     34.500000   34.250000\n",
       "50%     46.175000   45.000000\n",
       "75%     67.500000   63.750000\n",
       "max    158.000000  242.000000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>776.000000</td>\n",
       "      <td>776.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>55.075290</td>\n",
       "      <td>50.961985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>20.822288</td>\n",
       "      <td>17.016688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>26.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>36.250000</td>\n",
       "      <td>36.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>53.450000</td>\n",
       "      <td>45.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>69.500000</td>\n",
       "      <td>61.812500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>122.750000</td>\n",
       "      <td>98.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           France     Germany\n",
       "count  776.000000  776.000000\n",
       "mean    55.075290   50.961985\n",
       "std     20.822288   17.016688\n",
       "min     26.000000   26.700000\n",
       "25%     36.250000   36.687500\n",
       "50%     53.450000   45.800000\n",
       "75%     69.500000   61.812500\n",
       "max    122.750000   98.000000"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>776.000000</td>\n",
       "      <td>776.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>59.871907</td>\n",
       "      <td>58.259601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>11.975259</td>\n",
       "      <td>10.399668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>43.750000</td>\n",
       "      <td>42.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>51.700000</td>\n",
       "      <td>50.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>54.100000</td>\n",
       "      <td>55.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>64.762500</td>\n",
       "      <td>62.637500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>93.000000</td>\n",
       "      <td>90.100000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           France     Germany\n",
       "count  776.000000  776.000000\n",
       "mean    59.871907   58.259601\n",
       "std     11.975259   10.399668\n",
       "min     43.750000   42.400000\n",
       "25%     51.700000   50.600000\n",
       "50%     54.100000   55.400000\n",
       "75%     64.762500   62.637500\n",
       "max     93.000000   90.100000"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d['France'].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_d['Germany'].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_d.plot(kind ='line', y = ['France','Germany'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "import pandas as pd\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "\n",
    "app = dash.Dash(__name__, external_stylesheets=external_stylesheets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_list = ['France','Germany']\n",
    "date_list = ['Day','Month','Year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "app.layout = html.Div([\n",
    "    \n",
    "    html.Div([\n",
    "        html.Br(),\n",
    "        html.Label([''],style={'font-weight': 'bold', \"text-align\": \"center\"}),\n",
    "        \n",
    "        dcc.Dropdown(\n",
    "            id = 'country',\n",
    "            options = [{'label': i, 'value':i} for i in country_list],\n",
    "            value=country_list[0]),\n",
    "        \n",
    "        \n",
    "        dcc.RadioItems(\n",
    "        id = 'date',\n",
    "        options = [{'label': i, 'value': i} for i in date_list],\n",
    "        value = date_list[0],\n",
    "        labelStyle = {'display': 'inline-block'})\n",
    "        \n",
    "\n",
    "    ],style = {'width':'25%','margin-left':'0%'}),\n",
    "    \n",
    "    html.Div([\n",
    "        dcc.Graph(id = 'our_serie')\n",
    "        \n",
    "    ], className = 'nine columns'),\n",
    "    \n",
    "    \n",
    "],style ={'display': 'inline-block','width':\"99%\"})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>53.000</td>\n",
       "      <td>54.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>52.800</td>\n",
       "      <td>54.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>52.900</td>\n",
       "      <td>54.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>51.800</td>\n",
       "      <td>53.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>51.425</td>\n",
       "      <td>52.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  France  Germany\n",
       "date                               \n",
       "2007-01-02  1/2/07  53.000    54.70\n",
       "2007-01-03  1/3/07  52.800    54.35\n",
       "2007-01-04  1/4/07  52.900    54.20\n",
       "2007-01-05  1/5/07  51.800    53.40\n",
       "2007-01-08  1/8/07  51.425    52.70"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>53.85</td>\n",
       "      <td>53.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>53.75</td>\n",
       "      <td>53.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>53.95</td>\n",
       "      <td>53.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>52.25</td>\n",
       "      <td>51.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>49.35</td>\n",
       "      <td>49.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  France  Germany\n",
       "date                               \n",
       "2007-01-02  1/2/07   53.85    53.25\n",
       "2007-01-03  1/3/07   53.75    53.00\n",
       "2007-01-04  1/4/07   53.95    53.10\n",
       "2007-01-05  1/5/07   52.25    51.50\n",
       "2007-01-08  1/8/07   49.35    49.25"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_m.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>France</th>\n",
       "      <th>Germany</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007-01-02</th>\n",
       "      <td>1/2/07</td>\n",
       "      <td>40.50</td>\n",
       "      <td>36.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-03</th>\n",
       "      <td>1/3/07</td>\n",
       "      <td>37.75</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-04</th>\n",
       "      <td>1/4/07</td>\n",
       "      <td>36.00</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-05</th>\n",
       "      <td>1/5/07</td>\n",
       "      <td>29.00</td>\n",
       "      <td>29.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-08</th>\n",
       "      <td>1/8/07</td>\n",
       "      <td>32.20</td>\n",
       "      <td>31.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  France  Germany\n",
       "date                               \n",
       "2007-01-02  1/2/07   40.50    36.90\n",
       "2007-01-03  1/3/07   37.75    34.00\n",
       "2007-01-04  1/4/07   36.00    34.00\n",
       "2007-01-05  1/5/07   29.00    29.35\n",
       "2007-01-08  1/8/07   32.20    31.75"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.callback(\n",
    "    dash.dependencies.Output('our_serie','figure'),\n",
    "    [dash.dependencies.Input('country','value'),\n",
    "    dash.dependencies.Input('date','value')])\n",
    "\n",
    "def build_graph(country,date):\n",
    "    \n",
    "    if date == date_list[0]:\n",
    "        dff  = df_d\n",
    "    elif date == date_list[1]:\n",
    "        dff  = df_m\n",
    "    else:\n",
    "        dff = df_y\n",
    "        \n",
    "       \n",
    "    if country == country_list[0]:\n",
    "        fig = px.line(x=dff['date'], y = dff['France'],height=600)\n",
    "    else:\n",
    "        fig = px.line(x=dff['date'], y = dff['Germany'],height=600)\n",
    "                  \n",
    "    fig.update_layout(yaxis={'title':'Degree'},xaxis={'title':'Date'},\n",
    "                      title={'text':\"Séries temporelle de la consommation d'électricité en Allemagne et en France\",\n",
    "                      'font':{'size':18},'x':0.5,'xanchor':'center'})\n",
    "    return fig\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash is running on http://0.0.0.0:8010/\n",
      "\n",
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: Do not use the development server in a production environment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://0.0.0.0:8010/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:00] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_renderer/react@16.v1_8_3m1604141028.14.0.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_renderer/prop-types@15.v1_8_3m1604141028.7.2.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_renderer/polyfill@7.v1_8_3m1604141028.8.7.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_html_components/dash_html_components.v1_1_1m1604141031.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_renderer/react-dom@16.v1_8_3m1604141028.14.0.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_core_components/dash_core_components-shared.v1_13_0m1604141030.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_core_components/dash_core_components.v1_13_0m1604141030.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:04] \"\u001b[37mGET /_dash-component-suites/dash_renderer/dash_renderer.v1_8_3m1604141028.min.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:06] \"\u001b[37mGET /_favicon.ico?v=1.17.0 HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:06] \"\u001b[37mGET /_dash-layout HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:06] \"\u001b[37mGET /_dash-dependencies HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:06] \"\u001b[37mGET /_dash-component-suites/dash_core_components/async-dropdown.v1_13_0m1604001894.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:06] \"\u001b[37mGET /_dash-component-suites/dash_core_components/async-graph.v1_13_0m1604001894.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:06] \"\u001b[37mGET /_dash-component-suites/dash_core_components/async-plotlyjs.v1_13_0m1604001894.js HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:07] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:22] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:25] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:28] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:30] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:22:31] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:23:06] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [26/Nov/2020 15:23:07] \"\u001b[37mPOST /_dash-update-component HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False,host = '0.0.0.0', port = 8010)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
